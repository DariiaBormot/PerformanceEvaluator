@model WebSiteAnalyzerWeb.Models.WebSiteViewModel

@using (Html.BeginForm("Index", "Home"))
{
    @Html.AntiForgeryToken()

    <hr />

    <div class="form-group">
        @Html.LabelFor(m => m.Url, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Url, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Url)

            <hr />

            <input type="submit" value="Submit" />
        </div>
    </div>
}


@if (Model != null)
{
    <!-- Chart -->

        <script src="~/Scripts/Chart.min.js"></script>
        <script src="~/Scripts/jquery-3.4.1.min.js"></script>
        <script src="~/Scripts/bootstrap.min.js"></script>
        <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
        <style>

            #chart_container {
                width: 1000px;
                height: 400px;
                border: 1px solid #ddd;
                padding: 1px;
                border-radius: 4px;
            }
        </style>


        <div id="chart_container">
            <canvas id="bar_chart"></canvas>
        </div>

        <script>
        var speedArray = @Html.Raw(Json.Encode(ViewBag.Speeds));
        var repartArray = @Html.Raw(Json.Encode(ViewBag.Repart));

        var ctx = $("#bar_chart");
        var barChart = new Chart(ctx, {

            type: 'bar',
            data: {
                labels: repartArray,
                datasets: [{
                    label: "Page Speed",
                    data: speedArray,
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    borderWidth:1
                }]
            },

            options: {
                maintainAspectRatio: false,
                scales: { xAxes: [{ ticks: { beginAtZero: true }}] },
                legend: { display: false }

            },
        });

        </script>


<!-- Table -->
<table class="table">
    <tr>
        <th>
            Page
        </th>
        <th>
            Page Response Time
        </th>
        <th>
            Max Response Time
        </th>
        <th>
            Min Response Time
        </th>
    </tr>


    @foreach (var item in Model.Pages)

    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Path)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ResponseTime)
            </td>
            <td>
                @Html.DisplayFor(x => Model.MaxResponseTime)
            </td>
            <td>
                @Html.DisplayFor(x => Model.MinResponseTime)
            </td>
        </tr>
    }


</table>

}

@if (Model != null)
{

    @Html.ActionLink("Get History", "History", "Home", new { url = Model.Url }, new { @class = "btn btn-primary" })

}





